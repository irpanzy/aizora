// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleUser {
  superadmin
  customer
}

model User {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(255)
  email    String   @unique @db.VarChar(255)
  password String   @db.VarChar(255)
  role     RoleUser @default(customer)

  orders Order[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  logo String @db.VarChar(255)

  products Product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  products Product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Location {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  products Product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum ProductStatus {
  ready
  preorder
}

model Product {
  id          Int           @id @default(autoincrement())
  brand_id    Int
  category_id Int
  location_id Int
  name        String        @db.VarChar(255)
  description String        @db.Text
  price       BigInt        @db.BigInt
  stock       ProductStatus
  images      String[]

  orders OrderProduct[]

  brand    Brand    @relation(fields: [brand_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])
  location Location @relation(fields: [location_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum OrderStatus {
  pending
  success
  failed
}

model Order {
  id      Int         @id @default(autoincrement())
  user_id Int
  code    String      @unique @db.Text
  total   BigInt      @db.BigInt
  status  OrderStatus

  user User @relation(fields: [user_id], references: [id])

  detail   OrderDetail?
  products OrderProduct[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model OrderDetail {
  id          Int     @id @default(autoincrement())
  order_id    Int     @unique
  name        String  @db.VarChar(255)
  phone       String  @db.VarChar(255)
  address     String  @db.Text
  city        String  @db.VarChar(255)
  postal_code String  @db.VarChar(255)
  notes       String? @db.Text

  order Order @relation(fields: [order_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model OrderProduct {
  id         Int @id @default(autoincrement())
  product_id Int
  order_id   Int

  product Product @relation(fields: [product_id], references: [id])
  order   Order   @relation(fields: [order_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
